Daniel Bachler
CSCI 305
Spring 2018
Lab Questions
=======================
1. val it = [4,2,5,2,6,10] : int list

2. The function f goes through the list, adding 1 to each part and putting it
back in the list, calls itself recursively

3. First line defines the function as taking in a list of unspecified type,
which is later inferred based on operations to be an int list.  It also
states that an empty list, should just be an empty list, basically a nil check.

4. Second line calls the function again, on the head and rest of the list, with
recursive calls for the list until the end is reached.  As each element is
selected one is added to it, and it is re-added to the list.

5. Written like that it throws an error due to no parentheses around the parameters.
If the parentheses are put in the correct place it outputs:
Error: operator and operand don't agree [tycon mismatch]
operator domain: string * string set
operand:         string * string list
in expression:
  isMember ("one","1" :: "2" :: <exp> :: <exp>)

If you change the list to a set, it outputs:
  val it = false : bool

6. It uses tail recursion, since it starts with the head of the list and moves along the tail pulling the first
element each time.

7. val quest7 = Set ("best",Set ("times,",Set #)) : string set

8.  The main benefit that I could find is that unlike in "regular" recursion, tail recursion does not require
the computer to remember the "return address" so the stack does not need to be utilized for recursion.  Instead the
value is returned directly into the original function, making it run faster and with less memory.

9.

10.

11. ML seems to be a very powerful language once it is understood.  For math
or calculation purposes it has more concise functionality than other languages

12. ML is very hard to understand at first, it takes a lot of time and research
into the language to grasp its syntax and symbols, or at least for me it did.

13. I did not enjoy this lab, ML is incredibly confusing and attempting to debug
is the hardest part.  I dislike the error messages structure as they are harder to read and
understand than languages I've use previously.

14. About 20, most of which was spent reading MIT lecture pages trying to understand ML

15. I might use ML again if I have a problem I feel it would be suited to solve.
Perhaps some kind of calculation or something best solved with recursion.
